
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/11-pref-saitama_dev.ipynb

import bs4
import re
import csv
import datetime
import requests
from collections import defaultdict

urls = ['https://www.pref.saitama.lg.jp/kense/shiryo/nyu-su/2020/4gatsu/index.html',
        'https://www.pref.saitama.lg.jp/kense/shiryo/nyu-su/2020/3gatsu/index.html',
        'https://www.pref.saitama.lg.jp/kense/shiryo/nyu-su/2020/2gatsu/index.html']

def get_src(url):
    response = requests.get(url)
    response.encoding = response.apparent_encoding
    return bs4.BeautifulSoup(response.text, 'html.parser')

def get_links(urls):
    domain = 'https://www.pref.saitama.lg.jp'
    filter = '新型コロナウイルス.+患者.+発生'
    links = []
    for url in urls:
        src = get_src(url)
        links.extend(src.find_all(lambda tag: tag.name == 'a' and re.search(filter, tag.get_text()) != None))
    return [[domain + tag['href'], tag.get_text()] for tag in links]

def parse_url(url):
    """ url から公表日を取得する """
    s = re.split("[:/|-]", url)
    return f'{s[7]}/{(s[8])[:2]}/{(s[8])[2:]}'

header = ['No','日付','年代','性別','国籍','職業','通勤','居住地','症状、経過','その他','url']

def parse(src, url):

    def get_text(tag):
        return tag.get_text().strip()

    def get_contents(src):
        h = src.body.find(lambda tag: tag.name == 'h2' or tag.name == 'h3')
        return h.previous_sibling.next_siblings

    def parse_h(e):
        no = re.sub("\\D", "", get_text(e))
        return no if len(no) > 0 else '0'

    def parse_p(e):
        return re.split('[：:)）]', get_text(e))

    def parse_table(e):
        table = []
        for tr in e.find_all('tr'):
            row = []
            for td in tr.find_all('td'):
                for p in td.find_all('p'):
                    row.append(get_text(p))
            table.append(' '.join(row))
        return table

    def parse_ul(e):
        return [get_text(li) for li in e.find_all('li')]

    def parse_div(e):
        ul = []
        for c in e.descendants:
            if c.name == 'p':
                ul.append(get_text(c))
        return ul

    def dic2array(item):
        return [item[h] for h in header]

    date = parse_url(url)

    patients = []
    item = defaultdict(lambda: '')
    for e in get_contents(src):
        if isinstance(e, bs4.element.Tag):
            if e.name == 'h2' or e.name == 'h3':
                if not '概要' in e.get_text():
                    break
                if len(item) > 0:
                    item['url'] = url
                    item['日付'] = date
                    patients.append(dic2array(item))
                    item = defaultdict(lambda: '')
                item[header[0]] = parse_h(e)
            elif e.name == 'p':
                x = parse_p(e)
                if len(x) > 2: item[x[1]] = x[2]
                if len(x) > 1: p = x[1]
            elif e.name == 'table':
                item[p] = '\n'.join(parse_table(e))
            elif e.name == 'ul':
                item[p] = '\n'.join(parse_ul(e))
            elif e.name == 'div':
                item[p] = '\n'.join(parse_div(e))
            else:
                print(type(e), e.name)
    if len(item) > 0:
        item['url'] = url
        item['日付'] = date
        patients.append(dic2array(item))
    return patients

def get_patient(url):
    src = get_src(url)
    return parse(src, url)

def get_patients(urls):
    patients = []
    for link in get_links(urls):
        print(link)
        patients.extend(get_patient(link[0]))
    return patients

def create_fname(base):
    now = datetime.datetime.now()
    return base + '_' + now.strftime('%Y%m%dT%H%M') + ".csv"

def write_csv(patients, fname):
    with open(fname, 'w') as f:
        writer = csv.writer(f)
        writer.writerows(patients)

def main():
    patients = sorted(get_patients(urls), key=lambda x: int(x[0]))
    patients.insert(0, header)
    fname = create_fname("data/11-pref-saitama")
    write_csv(patients, fname)
    print("created:", fname)

if __name__ == '__main__':
    main()